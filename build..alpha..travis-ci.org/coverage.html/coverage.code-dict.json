{"/home/travis/build/npmtest/node-npmtest-id3js/test.js":"/* istanbul instrument in package npmtest_id3js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-id3js/lib.npmtest_id3js.js":"/* istanbul instrument in package npmtest_id3js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_id3js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_id3js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-id3js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-id3js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_id3js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_id3js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_id3js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_id3js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_id3js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_id3js.__dirname + '/lib.npmtest_id3js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/dist/id3.js":"/*\r\n * ID3 (v1/v2) Parser\r\n * 43081j\r\n * License: MIT, see LICENSE\r\n */\r\n\r\n(function() {\r\n\t/*\r\n\t * lib/reader.js\r\n\t * Readers (local, ajax, file)\r\n\t */\r\n\tvar Reader = function(type) {\r\n\t\tthis.type = type || Reader.OPEN_URI;\r\n\t\tthis.size = null;\r\n\t\tthis.file = null;\r\n\t};\r\n\r\n\tReader.OPEN_FILE = 1;\r\n\tReader.OPEN_URI = 2;\r\n\tReader.OPEN_LOCAL = 3;\r\n\r\n\tif(typeof require === 'function') {\r\n\t\tvar fs = require('fs');\r\n\t}\r\n\r\n\tReader.prototype.open = function(file, callback) {\r\n\t\tthis.file = file;\r\n\t\tvar self = this;\r\n\t\tswitch(this.type) {\r\n\t\t\tcase Reader.OPEN_LOCAL:\r\n\t\t\t\tfs.stat(this.file, function(err, stat) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.size = stat.size;\r\n\t\t\t\t\tfs.open(self.file, 'r', function(err, fd) {\r\n\t\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself.fd = fd;\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\tbreak;\r\n\t\t\tcase Reader.OPEN_FILE:\r\n\t\t\t\tthis.size = this.file.size;\r\n\t\t\t\tcallback();\r\n\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.ajax(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\turi: this.file,\r\n\t\t\t\t\t\ttype: 'HEAD',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction(err, resp, xhr) {\r\n\t\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself.size = parseInt(xhr.getResponseHeader('Content-Length'));\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tReader.prototype.close = function() {\r\n\t\tif(this.type === Reader.OPEN_LOCAL) {\r\n\t\t\tfs.close(this.fd);\r\n\t\t}\r\n\t};\r\n\r\n\tReader.prototype.read = function(length, position, callback) {\r\n\t\tif(typeof position === 'function') {\r\n\t\t\tcallback = position;\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\t\tif(this.type === Reader.OPEN_LOCAL) {\r\n\t\t\tthis.readLocal(length, position, callback);\r\n\t\t} else if(this.type === Reader.OPEN_FILE) {\r\n\t\t\tthis.readFile(length, position, callback);\r\n\t\t} else {\r\n\t\t\tthis.readUri(length, position, callback);\r\n\t\t}\r\n\t};\r\n\r\n\tReader.prototype.readBlob = function(length, position, type, callback) {\r\n\t\tif(typeof position === 'function') {\r\n\t\t\tcallback = position;\r\n\t\t\tposition = 0;\r\n\t\t} else if(typeof type === 'function') {\r\n\t\t\tcallback = type;\r\n\t\t\ttype = 'application/octet-stream';\r\n\t\t}\r\n\t\tthis.read(length, position, function(err, data) {\r\n\t\t\tif(err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcallback(null, new Blob([data], {type: type}));\r\n\t\t});\r\n\t};\r\n\r\n\t/*\r\n\t * Local reader\r\n\t */\r\n\tReader.prototype.readLocal = function(length, position, callback) {\r\n\t\tvar buffer = new Buffer(length);\r\n\t\tfs.read(this.fd, buffer, 0, length, position, function(err, bytesRead, buffer) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tvar ab = new ArrayBuffer(buffer.length),\r\n\t\t\t\tview = new Uint8Array(ab);\r\n\t\t\tfor(var i = 0; i < buffer.length; i++) {\r\n\t\t\t\tview[i] = buffer[i];\r\n\t\t\t}\r\n\t\t\tcallback(null, ab);\r\n\t\t});\r\n\t};\r\n\r\n\t/*\r\n\t * URL reader\r\n\t */\r\n\tReader.prototype.ajax = function(opts, callback) {\r\n\t\tvar options = {\r\n\t\t\ttype: 'GET',\r\n\t\t\turi: null,\r\n\t\t\tresponseType: 'text'\r\n\t\t};\r\n\t\tif(typeof opts === 'string') {\r\n\t\t\topts = {uri: opts};\r\n\t\t}\r\n\t\tfor(var k in opts) {\r\n\t\t\toptions[k] = opts[k];\r\n\t\t}\r\n\t\tvar xhr = new XMLHttpRequest();\r\n\t\txhr.onreadystatechange = function() {\r\n\t\t\tif(xhr.readyState !== 4) return;\r\n\t\t\tif(xhr.status !== 200 && xhr.status !== 206) {\r\n\t\t\t\treturn callback('Received non-200/206 response (' + xhr.status + ')');\r\n\t\t\t}\r\n\t\t\tcallback(null, xhr.response, xhr);\r\n\t\t};\r\n\t\txhr.responseType = options.responseType;\r\n\t\txhr.open(options.type, options.uri, true);\r\n\t\tif(options.range) {\r\n\t\t\toptions.range = [].concat(options.range);\r\n\t\t\tif(options.range.length === 2) {\r\n\t\t\t\txhr.setRequestHeader('Range', 'bytes=' + options.range[0] + '-' + options.range[1]);\r\n\t\t\t} else {\r\n\t\t\t\txhr.setRequestHeader('Range', 'bytes=' + options.range[0]);\r\n\t\t\t}\r\n\t\t}\r\n\t\txhr.send();\r\n\t};\r\n\r\n\tReader.prototype.readUri = function(length, position, callback) {\r\n\t\tthis.ajax(\r\n\t\t\t{\r\n\t\t\t\turi: this.file,\r\n\t\t\t\ttype: 'GET',\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t\trange: [position, position+length-1]\r\n\t\t\t},\r\n\t\t\tfunction(err, buffer) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\treturn callback(null, buffer);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/*\r\n\t * File API reader\r\n\t */\r\n\tReader.prototype.readFile = function(length, position, callback) {\r\n\t\tvar slice = this.file.slice(position, position+length),\r\n\t\t\tfr = new FileReader();\r\n\t\tfr.onload = function(e) {\r\n\t\t\tcallback(null, e.target.result);\r\n\t\t};\r\n\t\tfr.onerror = function(e) {\r\n\t\t\tcallback('File read failed');\r\n\t\t};\r\n\t\tfr.readAsArrayBuffer(slice);\r\n\t};\r\n\r\n\t/*\r\n\t * lib/dataview-extra.js\r\n\t */\r\n\tDataView.prototype.getString = function(length, offset, raw) {\r\n\t\toffset = offset || 0;\r\n\t\tlength = length || (this.byteLength - offset);\r\n\t\tif(length < 0) {\r\n\t\t\tlength += this.byteLength;\r\n\t\t}\r\n\t\tvar str = '';\r\n\t\tif(typeof Buffer !== 'undefined') {\r\n\t\t\tvar data = [];\r\n\t\t\tfor(var i = offset; i < (offset + length); i++) {\r\n\t\t\t\tdata.push(this.getUint8(i));\r\n\t\t\t}\r\n\t\t\treturn (new Buffer(data)).toString();\r\n\t\t} else {\r\n\t\t\tfor(var i = offset; i < (offset + length); i++) {\r\n\t\t\t\tstr += String.fromCharCode(this.getUint8(i));\r\n\t\t\t}\r\n\t\t\tif(raw) {\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t\treturn decodeURIComponent(encodeURIComponent(str));\r\n\t\t}\r\n\t};\r\n\r\n\tDataView.prototype.getStringUtf16 = function(length, offset, bom) {\r\n\t\toffset = offset || 0;\r\n\t\tlength = length || (this.byteLength - offset);\r\n\t\tvar littleEndian = false,\r\n\t\t\tstr = '',\r\n\t\t\tuseBuffer = false;\r\n\t\tif(typeof Buffer !== 'undefined') {\r\n\t\t\tstr = [];\r\n\t\t\tuseBuffer = true;\r\n\t\t}\r\n\t\tif(length < 0) {\r\n\t\t\tlength += this.byteLength;\r\n\t\t}\r\n\t\tif(bom) {\r\n\t\t\tvar bomInt = this.getUint16(offset);\r\n\t\t\tif(bomInt === 0xFFFE) {\r\n\t\t\t\tlittleEndian = true;\r\n\t\t\t}\r\n\t\t\toffset += 2;\r\n\t\t\tlength -= 2;\r\n\t\t}\r\n\t\tfor(var i = offset; i < (offset + length); i += 2) {\r\n\t\t\tvar ch = this.getUint16(i, littleEndian);\r\n\t\t\tif((ch >= 0 && ch <= 0xD7FF) || (ch >= 0xE000 && ch <= 0xFFFF)) {\r\n\t\t\t\tif(useBuffer) {\r\n\t\t\t\t\tstr.push(ch);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstr += String.fromCharCode(ch);\r\n\t\t\t\t}\r\n\t\t\t} else if(ch >= 0x10000 && ch <= 0x10FFFF) {\r\n\t\t\t\tch -= 0x10000;\r\n\t\t\t\tif(useBuffer) {\r\n\t\t\t\t\tstr.push(((0xFFC00 & ch) >> 10) + 0xD800);\r\n\t\t\t\t\tstr.push((0x3FF & ch) + 0xDC00);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstr += String.fromCharCode(((0xFFC00 & ch) >> 10) + 0xD800) + String.fromCharCode((0x3FF & ch) + 0xDC00);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(useBuffer) {\r\n\t\t\treturn (new Buffer(str)).toString();\r\n\t\t} else {\r\n\t\t\treturn decodeURIComponent(encodeURIComponent(str));\r\n\t\t}\r\n\t};\r\n\r\n\tDataView.prototype.getSynch = function(num) {\r\n\t\tvar out = 0,\r\n\t\t\tmask = 0x7f000000;\r\n\t\twhile(mask) {\r\n\t\t\tout >>= 1;\r\n\t\t\tout |= num & mask;\r\n\t\t\tmask >>= 8;\r\n\t\t}\r\n\t\treturn out;\r\n\t};\r\n\r\n\tDataView.prototype.getUint8Synch = function(offset) {\r\n\t\treturn this.getSynch(this.getUint8(offset));\r\n\t};\r\n\r\n\tDataView.prototype.getUint32Synch = function(offset) {\r\n\t\treturn this.getSynch(this.getUint32(offset));\r\n\t};\r\n\r\n\t/*\r\n\t * Not really an int as such, but named for consistency\r\n\t */\r\n\tDataView.prototype.getUint24 = function(offset, littleEndian) {\r\n\t\tif(littleEndian) {\r\n\t\t\treturn this.getUint8(offset) + (this.getUint8(offset + 1) << 8) + (this.getUint8(offset + 2) << 16);\r\n\t\t}\r\n\t\treturn this.getUint8(offset + 2) + (this.getUint8(offset + 1) << 8) + (this.getUint8(offset) << 16);\r\n\t};\r\n\r\n\tvar id3 = function(opts, cb) {\r\n\t\t/*\r\n\t\t * Initialise ID3\r\n\t\t */\r\n\t\tvar options = {\r\n\t\t\ttype: id3.OPEN_URI,\r\n\t\t};\r\n\t\tif(typeof opts === 'string') {\r\n\t\t\topts = {file: opts, type: id3.OPEN_URI};\r\n\t\t} else if(typeof window !== 'undefined' && window.File && opts instanceof window.File) {\r\n\t\t\topts = {file: opts, type: id3.OPEN_FILE};\r\n\t\t}\r\n\t\tfor(var k in opts) {\r\n\t\t\toptions[k] = opts[k];\r\n\t\t}\r\n\r\n\t\tif(!options.file) {\r\n\t\t\treturn cb('No file was set');\r\n\t\t}\r\n\r\n\t\tif(options.type === id3.OPEN_FILE) {\r\n\t\t\tif(typeof window === 'undefined' || !window.File || !window.FileReader || typeof ArrayBuffer === 'undefined') {\r\n\t\t\t\treturn cb('Browser does not have support for the File API and/or ArrayBuffers');\r\n\t\t\t}\r\n\t\t} else if(options.type === id3.OPEN_LOCAL) {\r\n\t\t\tif(typeof require !== 'function') {\r\n\t\t\t\treturn cb('Local paths may not be read within a browser');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * lib/genres.js\r\n\t\t * Genre list\r\n\t\t */\r\n\r\n\t\tvar Genres = [\r\n\t\t\t'Blues',\r\n\t\t\t'Classic Rock',\r\n\t\t\t'Country',\r\n\t\t\t'Dance',\r\n\t\t\t'Disco',\r\n\t\t\t'Funk',\r\n\t\t\t'Grunge',\r\n\t\t\t'Hip-Hop',\r\n\t\t\t'Jazz',\r\n\t\t\t'Metal',\r\n\t\t\t'New Age',\r\n\t\t\t'Oldies',\r\n\t\t\t'Other',\r\n\t\t\t'Pop',\r\n\t\t\t'R&B',\r\n\t\t\t'Rap',\r\n\t\t\t'Reggae',\r\n\t\t\t'Rock',\r\n\t\t\t'Techno',\r\n\t\t\t'Industrial',\r\n\t\t\t'Alternative',\r\n\t\t\t'Ska',\r\n\t\t\t'Death Metal',\r\n\t\t\t'Pranks',\r\n\t\t\t'Soundtrack',\r\n\t\t\t'Euro-Techno',\r\n\t\t\t'Ambient',\r\n\t\t\t'Trip-Hop',\r\n\t\t\t'Vocal',\r\n\t\t\t'Jazz+Funk',\r\n\t\t\t'Fusion',\r\n\t\t\t'Trance',\r\n\t\t\t'Classical',\r\n\t\t\t'Instrumental',\r\n\t\t\t'Acid',\r\n\t\t\t'House',\r\n\t\t\t'Game',\r\n\t\t\t'Sound Clip',\r\n\t\t\t'Gospel',\r\n\t\t\t'Noise',\r\n\t\t\t'AlternRock',\r\n\t\t\t'Bass',\r\n\t\t\t'Soul',\r\n\t\t\t'Punk',\r\n\t\t\t'Space',\r\n\t\t\t'Meditative',\r\n\t\t\t'Instrumental Pop',\r\n\t\t\t'Instrumental Rock',\r\n\t\t\t'Ethnic',\r\n\t\t\t'Gothic',\r\n\t\t\t'Darkwave',\r\n\t\t\t'Techno-Industrial',\r\n\t\t\t'Electronic',\r\n\t\t\t'Pop-Folk',\r\n\t\t\t'Eurodance',\r\n\t\t\t'Dream',\r\n\t\t\t'Southern Rock',\r\n\t\t\t'Comedy',\r\n\t\t\t'Cult',\r\n\t\t\t'Gangsta Rap',\r\n\t\t\t'Top 40',\r\n\t\t\t'Christian Rap',\r\n\t\t\t'Pop / Funk',\r\n\t\t\t'Jungle',\r\n\t\t\t'Native American',\r\n\t\t\t'Cabaret',\r\n\t\t\t'New Wave',\r\n\t\t\t'Psychedelic',\r\n\t\t\t'Rave',\r\n\t\t\t'Showtunes',\r\n\t\t\t'Trailer',\r\n\t\t\t'Lo-Fi',\r\n\t\t\t'Tribal',\r\n\t\t\t'Acid Punk',\r\n\t\t\t'Acid Jazz',\r\n\t\t\t'Polka',\r\n\t\t\t'Retro',\r\n\t\t\t'Musical',\r\n\t\t\t'Rock & Roll',\r\n\t\t\t'Hard Rock',\r\n\t\t\t'Folk',\r\n\t\t\t'Folk-Rock',\r\n\t\t\t'National Folk',\r\n\t\t\t'Swing',\r\n\t\t\t'Fast  Fusion',\r\n\t\t\t'Bebob',\r\n\t\t\t'Latin',\r\n\t\t\t'Revival',\r\n\t\t\t'Celtic',\r\n\t\t\t'Bluegrass',\r\n\t\t\t'Avantgarde',\r\n\t\t\t'Gothic Rock',\r\n\t\t\t'Progressive Rock',\r\n\t\t\t'Psychedelic Rock',\r\n\t\t\t'Symphonic Rock',\r\n\t\t\t'Slow Rock',\r\n\t\t\t'Big Band',\r\n\t\t\t'Chorus',\r\n\t\t\t'Easy Listening',\r\n\t\t\t'Acoustic',\r\n\t\t\t'Humour',\r\n\t\t\t'Speech',\r\n\t\t\t'Chanson',\r\n\t\t\t'Opera',\r\n\t\t\t'Chamber Music',\r\n\t\t\t'Sonata',\r\n\t\t\t'Symphony',\r\n\t\t\t'Booty Bass',\r\n\t\t\t'Primus',\r\n\t\t\t'Porn Groove',\r\n\t\t\t'Satire',\r\n\t\t\t'Slow Jam',\r\n\t\t\t'Club',\r\n\t\t\t'Tango',\r\n\t\t\t'Samba',\r\n\t\t\t'Folklore',\r\n\t\t\t'Ballad',\r\n\t\t\t'Power Ballad',\r\n\t\t\t'Rhythmic Soul',\r\n\t\t\t'Freestyle',\r\n\t\t\t'Duet',\r\n\t\t\t'Punk Rock',\r\n\t\t\t'Drum Solo',\r\n\t\t\t'A Cappella',\r\n\t\t\t'Euro-House',\r\n\t\t\t'Dance Hall',\r\n\t\t\t'Goa',\r\n\t\t\t'Drum & Bass',\r\n\t\t\t'Club-House',\r\n\t\t\t'Hardcore',\r\n\t\t\t'Terror',\r\n\t\t\t'Indie',\r\n\t\t\t'BritPop',\r\n\t\t\t'Negerpunk',\r\n\t\t\t'Polsk Punk',\r\n\t\t\t'Beat',\r\n\t\t\t'Christian Gangsta Rap',\r\n\t\t\t'Heavy Metal',\r\n\t\t\t'Black Metal',\r\n\t\t\t'Crossover',\r\n\t\t\t'Contemporary Christian',\r\n\t\t\t'Christian Rock',\r\n\t\t\t'Merengue',\r\n\t\t\t'Salsa',\r\n\t\t\t'Thrash Metal',\r\n\t\t\t'Anime',\r\n\t\t\t'JPop',\r\n\t\t\t'Synthpop',\r\n\t\t\t'Rock/Pop'\r\n\t\t];\r\n\r\n\r\n\t\t/*\r\n\t\t * lib/id3frame.js\r\n\t\t * ID3Frame\r\n\t\t */\r\n\r\n\t\tvar ID3Frame = {};\r\n\r\n\t\t/*\r\n\t\t * ID3v2.3 and later frame types\r\n\t\t */\r\n\t\tID3Frame.types = {\r\n\t\t\t/*\r\n\t\t\t * Textual frames\r\n\t\t\t */\r\n\t\t\t'TALB': 'album',\r\n\t\t\t'TBPM': 'bpm',\r\n\t\t\t'TCOM': 'composer',\r\n\t\t\t'TCON': 'genre',\r\n\t\t\t'TCOP': 'copyright',\r\n\t\t\t'TDEN': 'encoding-time',\r\n\t\t\t'TDLY': 'playlist-delay',\r\n\t\t\t'TDOR': 'original-release-time',\r\n\t\t\t'TDRC': 'recording-time',\r\n\t\t\t'TDRL': 'release-time',\r\n\t\t\t'TDTG': 'tagging-time',\r\n\t\t\t'TENC': 'encoder',\r\n\t\t\t'TEXT': 'writer',\r\n\t\t\t'TFLT': 'file-type',\r\n\t\t\t'TIPL': 'involved-people',\r\n\t\t\t'TIT1': 'content-group',\r\n\t\t\t'TIT2': 'title',\r\n\t\t\t'TIT3': 'subtitle',\r\n\t\t\t'TKEY': 'initial-key',\r\n\t\t\t'TLAN': 'language',\r\n\t\t\t'TLEN': 'length',\r\n\t\t\t'TMCL': 'credits',\r\n\t\t\t'TMED': 'media-type',\r\n\t\t\t'TMOO': 'mood',\r\n\t\t\t'TOAL': 'original-album',\r\n\t\t\t'TOFN': 'original-filename',\r\n\t\t\t'TOLY': 'original-writer',\r\n\t\t\t'TOPE': 'original-artist',\r\n\t\t\t'TOWN': 'owner',\r\n\t\t\t'TPE1': 'artist',\r\n\t\t\t'TPE2': 'band',\r\n\t\t\t'TPE3': 'conductor',\r\n\t\t\t'TPE4': 'remixer',\r\n\t\t\t'TPOS': 'set-part',\r\n\t\t\t'TPRO': 'produced-notice',\r\n\t\t\t'TPUB': 'publisher',\r\n\t\t\t'TRCK': 'track',\r\n\t\t\t'TRSN': 'radio-name',\r\n\t\t\t'TRSO': 'radio-owner',\r\n\t\t\t'TSOA': 'album-sort',\r\n\t\t\t'TSOP': 'performer-sort',\r\n\t\t\t'TSOT': 'title-sort',\r\n\t\t\t'TSRC': 'isrc',\r\n\t\t\t'TSSE': 'encoder-settings',\r\n\t\t\t'TSST': 'set-subtitle',\r\n\t\t\t/*\r\n\t\t\t * Textual frames (<=2.2)\r\n\t\t\t */\r\n\t\t\t'TAL': 'album',\r\n\t\t\t'TBP': 'bpm',\r\n\t\t\t'TCM': 'composer',\r\n\t\t\t'TCO': 'genre',\r\n\t\t\t'TCR': 'copyright',\r\n\t\t\t'TDY': 'playlist-delay',\r\n\t\t\t'TEN': 'encoder',\r\n\t\t\t'TFT': 'file-type',\r\n\t\t\t'TKE': 'initial-key',\r\n\t\t\t'TLA': 'language',\r\n\t\t\t'TLE': 'length',\r\n\t\t\t'TMT': 'media-type',\r\n\t\t\t'TOA': 'original-artist',\r\n\t\t\t'TOF': 'original-filename',\r\n\t\t\t'TOL': 'original-writer',\r\n\t\t\t'TOT': 'original-album',\r\n\t\t\t'TP1': 'artist',\r\n\t\t\t'TP2': 'band',\r\n\t\t\t'TP3': 'conductor',\r\n\t\t\t'TP4': 'remixer',\r\n\t\t\t'TPA': 'set-part',\r\n\t\t\t'TPB': 'publisher',\r\n\t\t\t'TRC': 'isrc',\r\n\t\t\t'TRK': 'track',\r\n\t\t\t'TSS': 'encoder-settings',\r\n\t\t\t'TT1': 'content-group',\r\n\t\t\t'TT2': 'title',\r\n\t\t\t'TT3': 'subtitle',\r\n\t\t\t'TXT': 'writer',\r\n\t\t\t/*\r\n\t\t\t * URL frames\r\n\t\t\t */\r\n\t\t\t'WCOM': 'url-commercial',\r\n\t\t\t'WCOP': 'url-legal',\r\n\t\t\t'WOAF': 'url-file',\r\n\t\t\t'WOAR': 'url-artist',\r\n\t\t\t'WOAS': 'url-source',\r\n\t\t\t'WORS': 'url-radio',\r\n\t\t\t'WPAY': 'url-payment',\r\n\t\t\t'WPUB': 'url-publisher',\r\n\t\t\t/*\r\n\t\t\t * URL frames (<=2.2)\r\n\t\t\t */\r\n\t\t\t'WAF': 'url-file',\r\n\t\t\t'WAR': 'url-artist',\r\n\t\t\t'WAS': 'url-source',\r\n\t\t\t'WCM': 'url-commercial',\r\n\t\t\t'WCP': 'url-copyright',\r\n\t\t\t'WPB': 'url-publisher',\r\n\t\t\t/*\r\n\t\t\t * Comment frame\r\n\t\t\t */\r\n\t\t\t'COMM': 'comments',\r\n\t\t\t/*\r\n\t\t\t * Image frame\r\n\t\t\t */\r\n\t\t\t'APIC': 'image',\r\n\t\t\t'PIC': 'image'\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * ID3 image types\r\n\t\t */\r\n\t\tID3Frame.imageTypes = [\r\n\t\t\t'other',\r\n\t\t\t'file-icon',\r\n\t\t\t'icon',\r\n\t\t\t'cover-front',\r\n\t\t\t'cover-back',\r\n\t\t\t'leaflet',\r\n\t\t\t'media',\r\n\t\t\t'artist-lead',\r\n\t\t\t'artist',\r\n\t\t\t'conductor',\r\n\t\t\t'band',\r\n\t\t\t'composer',\r\n\t\t\t'writer',\r\n\t\t\t'location',\r\n\t\t\t'during-recording',\r\n\t\t\t'during-performance',\r\n\t\t\t'screen',\r\n\t\t\t'fish',\r\n\t\t\t'illustration',\r\n\t\t\t'logo-band',\r\n\t\t\t'logo-publisher'\r\n\t\t];\r\n\r\n\t\t/*\r\n\t\t * ID3v2.3 and later\r\n\t\t */\r\n\t\tID3Frame.parse = function(buffer, major, minor) {\r\n\t\t\tminor = minor || 0;\r\n\t\t\tmajor = major || 4;\r\n\t\t\tvar result = {tag: null, value: null},\r\n\t\t\t\tdv = new DataView(buffer);\r\n\t\t\tif(major < 3) {\r\n\t\t\t\treturn ID3Frame.parseLegacy(buffer);\r\n\t\t\t}\r\n\t\t\tvar header = {\r\n\t\t\t\tid: dv.getString(4),\r\n\t\t\t\ttype: dv.getString(1),\r\n\t\t\t\tsize: dv.getUint32Synch(4),\r\n\t\t\t\tflags: [\r\n\t\t\t\t\tdv.getUint8(8),\r\n\t\t\t\t\tdv.getUint8(9)\r\n\t\t\t\t]\r\n\t\t\t};\r\n\t\t\t/*\r\n\t\t\t * No support for compressed, unsychronised, etc frames\r\n\t\t\t */\r\n\t\t\tif(header.flags[1] !== 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!header.id in ID3Frame.types) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult.tag = ID3Frame.types[header.id];\r\n\t\t\tif(header.type === 'T') {\r\n\t\t\t\tvar encoding = dv.getUint8(10);\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t\t\t */\r\n\t\t\t\tif(encoding === 0 || encoding === 3) {\r\n\t\t\t\t\tresult.value = dv.getString(-11, 11);\r\n\t\t\t\t} else if(encoding === 1) {\r\n\t\t\t\t\tresult.value = dv.getStringUtf16(-11, 11, true);\r\n\t\t\t\t} else if(encoding === 2) {\r\n\t\t\t\t\tresult.value = dv.getStringUtf16(-11, 11);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(header.id === 'TCON' && !!parseInt(result.value)) {\r\n\t\t\t\t\tresult.value = Genres[parseInt(result.value)];\r\n\t\t\t\t}\r\n\t\t\t} else if(header.type === 'W') {\r\n\t\t\t\tresult.value = dv.getString(-10, 10);\r\n\t\t\t} else if(header.id === 'COMM') {\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t\t\t */\r\n\t\t\t\tvar encoding = dv.getUint8(10),\r\n\t\t\t\t\tvariableStart = 14, variableLength = 0;\r\n\t\t\t\t/*\r\n\t\t\t\t * Skip the comment description and retrieve only the comment its self\r\n\t\t\t\t */\r\n\t\t\t\tfor(var i = variableStart;; i++) {\r\n\t\t\t\t\tif(encoding === 1 || encoding === 2) {\r\n\t\t\t\t\t\tif(dv.getUint16(i) === 0x0000) {\r\n\t\t\t\t\t\t\tvariableStart = i + 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\t\t\t\tvariableStart = i + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(encoding === 0 || encoding === 3) {\r\n\t\t\t\t\tresult.value = dv.getString(-1 * variableStart, variableStart);\r\n\t\t\t\t} else if(encoding === 1) {\r\n\t\t\t\t\tresult.value = dv.getStringUtf16(-1 * variableStart, variableStart, true);\r\n\t\t\t\t} else if(encoding === 2) {\r\n\t\t\t\t\tresult.value = dv.getStringUtf16(-1 * variableStart, variableStart);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else if(header.id === 'APIC') {\r\n\t\t\t\tvar encoding = dv.getUint8(10),\r\n\t\t\t\t\timage = {\r\n\t\t\t\t\t\ttype: null,\r\n\t\t\t\t\t\tmime: null,\r\n\t\t\t\t\t\tdescription: null,\r\n\t\t\t\t\t\tdata: null\r\n\t\t\t\t\t};\r\n\t\t\t\tvar variableStart = 11, variableLength = 0;\r\n\t\t\t\tfor(var i = variableStart;;i++) {\r\n\t\t\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\timage.mime = dv.getString(variableLength, variableStart);\r\n\t\t\t\timage.type = ID3Frame.imageTypes[dv.getUint8(variableStart + variableLength + 1)] || 'other';\r\n\t\t\t\tvariableStart += variableLength + 2;\r\n\t\t\t\tvariableLength = 0;\r\n\t\t\t\tfor(var i = variableStart;; i++) {\r\n\t\t\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\timage.description = (variableLength === 0 ? null : dv.getString(variableLength, variableStart));\r\n\t\t\t\timage.data = buffer.slice(variableStart + 1);\r\n\t\t\t\tresult.value = image;\r\n\t\t\t}\r\n\t\t\treturn (result.tag ? result : false);\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * ID3v2.2 and earlier\r\n\t\t */\r\n\t\tID3Frame.parseLegacy = function(buffer) {\r\n\t\t\tvar result = {tag: null, value: null},\r\n\t\t\t\tdv = new DataView(buffer),\r\n\t\t\t\theader = {\r\n\t\t\t\t\tid: dv.getString(3),\r\n\t\t\t\t\ttype: dv.getString(1),\r\n\t\t\t\t\tsize: dv.getUint24(3)\r\n\t\t\t\t};\r\n\t\t\tif(!header.id in ID3Frame.types) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult.tag = ID3Frame.types[header.id];\r\n\t\t\tif(header.type === 'T') {\r\n\t\t\t\tvar encoding = dv.getUint8(7);\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t\t\t */\r\n\t\t\t\tresult.value = dv.getString(-7, 7);\r\n\t\t\t\tif(header.id === 'TCO' && !!parseInt(result.value)) {\r\n\t\t\t\t\tresult.value = Genres[parseInt(result.value)];\r\n\t\t\t\t}\r\n\t\t\t} else if(header.type === 'W') {\r\n\t\t\t\tresult.value = dv.getString(-7, 7);\r\n\t\t\t} else if(header.id === 'COM') {\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t\t\t */\r\n\t\t\t\tvar encoding = dv.getUint8(6);\r\n\t\t\t\tresult.value = dv.getString(-10, 10);\r\n\t\t\t\tif(result.value.indexOf('\\x00') !== -1) {\r\n\t\t\t\t\tresult.value = result.value.substr(result.value.indexOf('\\x00') + 1);\r\n\t\t\t\t}\r\n\t\t\t} else if(header.id === 'PIC') {\r\n\t\t\t\tvar encoding = dv.getUint8(6),\r\n\t\t\t\t\timage = {\r\n\t\t\t\t\t\ttype: null,\r\n\t\t\t\t\t\tmime: 'image/' + dv.getString(3, 7).toLowerCase(),\r\n\t\t\t\t\t\tdescription: null,\r\n\t\t\t\t\t\tdata: null\r\n\t\t\t\t\t};\r\n\t\t\t\timage.type = ID3Frame.imageTypes[dv.getUint8(11)] || 'other';\r\n\t\t\t\tvar variableStart = 11, variableLength = 0;\r\n\t\t\t\tfor(var i = variableStart;; i++) {\r\n\t\t\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\timage.description = (variableLength === 0 ? null : dv.getString(variableLength, variableStart));\r\n\t\t\t\timage.data = buffer.slice(variableStart + 1);\r\n\t\t\t\tresult.value = image;\r\n\t\t\t}\r\n\t\t\treturn (result.tag ? result : false);\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * lib/id3tag.js\r\n\t\t * Parse an ID3 tag\r\n\t\t */\r\n\r\n\t\tvar ID3Tag = {};\r\n\r\n\t\tID3Tag.parse = function(handle, callback) {\r\n\t\t\tvar tags = {\r\n\t\t\t\t\ttitle: null,\r\n\t\t\t\t\talbum: null,\r\n\t\t\t\t\tartist: null,\r\n\t\t\t\t\tyear: null,\r\n\t\t\t\t\tv1: {\r\n\t\t\t\t\t\t\ttitle: null,\r\n\t\t\t\t\t\t\tartist: null,\r\n\t\t\t\t\t\t\talbum: null,\r\n\t\t\t\t\t\t\tyear: null,\r\n\t\t\t\t\t\t\tcomment: null,\r\n\t\t\t\t\t\t\ttrack: null,\r\n\t\t\t\t\t\t\tversion: 1.0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\tv2: {\r\n\t\t\t\t\t\t\tversion: [null, null]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tprocessed = {\r\n\t\t\t\t\tv1: false,\r\n\t\t\t\t\tv2: false\r\n\t\t\t\t},\r\n\t\t\t\tprocess = function(err) {\r\n\t\t\t\t\tif(processed.v1 && processed.v2) {\r\n\t\t\t\t\t\ttags.title = tags.v2.title || tags.v1.title;\r\n\t\t\t\t\t\ttags.album = tags.v2.album || tags.v1.album;\r\n\t\t\t\t\t\ttags.artist = tags.v2.artist || tags.v1.artist;\r\n\t\t\t\t\t\ttags.year = tags.v1.year;\r\n\t\t\t\t\t\tcallback(err, tags);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t/*\r\n\t\t\t * Read the last 128 bytes (ID3v1)\r\n\t\t\t */\r\n\t\t\thandle.read(128, handle.size - 128, function(err, buffer) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\treturn process('Could not read file');\r\n\t\t\t\t}\r\n\t\t\t\tvar dv = new DataView(buffer);\r\n\t\t\t\tif(buffer.byteLength !== 128 || dv.getString(3, null, true) !== 'TAG') {\r\n\t\t\t\t\tprocessed.v1 = true;\r\n\t\t\t\t\treturn process();\r\n\t\t\t\t}\r\n\t\t\t\ttags.v1.title = dv.getString(30, 3).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\t\t\ttags.v1.artist = dv.getString(30, 33).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\t\t\ttags.v1.album = dv.getString(30, 63).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\t\t\ttags.v1.year = dv.getString(4, 93).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\t\t\t/*\r\n\t\t\t\t * If there is a zero byte at [125], the comment is 28 bytes and the remaining 2 are [0, trackno]\r\n\t\t\t\t */\r\n\t\t\t\tif(dv.getUint8(125) === 0) {\r\n\t\t\t\t\ttags.v1.comment = dv.getString(28, 97).replace(/(^\\s+|\\s+$)/, '');\r\n\t\t\t\t\ttags.v1.version = 1.1;\r\n\t\t\t\t\ttags.v1.track = dv.getUint8(126);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttags.v1.comment = dv.getString(30, 97).replace(/(^\\s+|\\s+$)/, '');\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t * Lookup the genre index in the predefined genres array\r\n\t\t\t\t */\r\n\t\t\t\ttags.v1.genre = Genres[dv.getUint8(127)] || null;\r\n\t\t\t\tprocessed.v1 = true;\r\n\t\t\t\tprocess();\r\n\t\t\t});\r\n\t\t\t/*\r\n\t\t\t * Read 14 bytes (10 for ID3v2 header, 4 for possible extended header size)\r\n\t\t\t * Assuming the ID3v2 tag is prepended\r\n\t\t\t */\r\n\t\t\thandle.read(14, 0, function(err, buffer) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\treturn process('Could not read file');\r\n\t\t\t\t}\r\n\t\t\t\tvar dv = new DataView(buffer),\r\n\t\t\t\t\theaderSize = 10,\r\n\t\t\t\t\ttagSize = 0,\r\n\t\t\t\t\ttagFlags;\r\n\t\t\t\t/*\r\n\t\t\t\t * Be sure that the buffer is at least the size of an id3v2 header\r\n\t\t\t\t * Assume incompatibility if a major version of > 4 is used\r\n\t\t\t\t */\r\n\t\t\t\tif(buffer.byteLength !== 14 || dv.getString(3, null, true) !== 'ID3' || dv.getUint8(3) > 4) {\r\n\t\t\t\t\tprocessed.v2 = true;\r\n\t\t\t\t\treturn process();\r\n\t\t\t\t}\r\n\t\t\t\ttags.v2.version = [\r\n\t\t\t\t\tdv.getUint8(3),\r\n\t\t\t\t\tdv.getUint8(4)\r\n\t\t\t\t];\r\n\t\t\t\ttagFlags = dv.getUint8(5);\r\n\t\t\t\t/*\r\n\t\t\t\t * Do not support unsynchronisation\r\n\t\t\t\t */\r\n\t\t\t\tif((tagFlags & 0x80) !== 0) {\r\n\t\t\t\t\tprocessed.v2 = true;\r\n\t\t\t\t\treturn process();\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t * Increment the header size to offset by if an extended header exists\r\n\t\t\t\t */\r\n\t\t\t\tif((tagFlags & 0x40) !== 0) {\r\n\t\t\t\t\theaderSize += dv.getUint32Synch(11);\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t * Calculate the tag size to be read\r\n\t\t\t\t */\r\n\t\t\t\ttagSize += dv.getUint32Synch(6);\r\n\t\t\t\thandle.read(tagSize, headerSize, function(err, buffer) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\tprocessed.v2 = true;\r\n\t\t\t\t\t\treturn process();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dv = new DataView(buffer),\r\n\t\t\t\t\t\tposition = 0;\r\n\t\t\t\t\twhile(position < buffer.byteLength) {\r\n\t\t\t\t\t\tvar frame,\r\n\t\t\t\t\t\t\tslice,\r\n\t\t\t\t\t\t\tframeBit,\r\n\t\t\t\t\t\t\tisFrame = true;\r\n\t\t\t\t\t\tfor(var i = 0; i < 3; i++) {\r\n\t\t\t\t\t\t\tframeBit = dv.getUint8(position + i);\r\n\t\t\t\t\t\t\tif((frameBit < 0x41 || frameBit > 0x5A) && (frameBit < 0x30 || frameBit > 0x39)) {\r\n\t\t\t\t\t\t\t\tisFrame = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!isFrame) break;\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * < v2.3, frame ID is 3 chars, size is 3 bytes making a total size of 6 bytes\r\n\t\t\t\t\t\t * >= v2.3, frame ID is 4 chars, size is 4 bytes, flags are 2 bytes, total 10 bytes\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif(tags.v2.version[0] < 3) {\r\n\t\t\t\t\t\t\tslice = buffer.slice(position, position + 6 + dv.getUint24(position + 3));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tslice = buffer.slice(position, position + 10 + dv.getUint32Synch(position + 4));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tframe = ID3Frame.parse(slice, tags.v2.version[0]);\r\n\t\t\t\t\t\tif(frame) {\r\n\t\t\t\t\t\t\ttags.v2[frame.tag] = frame.value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tposition += slice.byteLength;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprocessed.v2 = true;\r\n\t\t\t\t\tprocess();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Read the file\r\n\t\t */\r\n\r\n\t\tvar handle = new Reader(options.type);\r\n\r\n\t\thandle.open(options.file, function(err) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn cb('Could not open specified file');\r\n\t\t\t}\r\n\t\t\tID3Tag.parse(handle, function(err, tags) {\r\n\t\t\t\tcb(err, tags);\r\n\t\t\t\thandle.close()\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tid3.OPEN_FILE = Reader.OPEN_FILE;\r\n\tid3.OPEN_URI = Reader.OPEN_URI;\r\n\tid3.OPEN_LOCAL = Reader.OPEN_LOCAL;\r\n\r\n\tif(typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = id3;\r\n\t} else {\r\n\t\tif(typeof define === 'function' && define.amd) {\r\n\t\t\tdefine('id3', [], function() {\r\n\t\t\t\treturn id3;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\twindow.id3 = id3;\r\n\t\t}\r\n\t}\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/lib/dataview-extra.js":"/*\r\n * dataview-extra.js\r\n * 43081j\r\n * License: MIT, see LICENSE\r\n */\r\nDataView.prototype.getString = function(length, offset, raw) {\r\n\toffset = offset || 0;\r\n\tlength = length || (this.byteLength - offset);\r\n\tif(length < 0) {\r\n\t\tlength += this.byteLength;\r\n\t}\r\n\tvar str = '';\r\n\tif(typeof Buffer !== 'undefined') {\r\n\t\tvar data = [];\r\n\t\tfor(var i = offset; i < (offset + length); i++) {\r\n\t\t\tdata.push(this.getUint8(i));\r\n\t\t}\r\n\t\treturn (new Buffer(data)).toString();\r\n\t} else {\r\n\t\tfor(var i = offset; i < (offset + length); i++) {\r\n\t\t\tstr += String.fromCharCode(this.getUint8(i));\r\n\t\t}\r\n\t\tif(raw) {\r\n\t\t\treturn str;\r\n\t\t}\r\n\t\treturn decodeURIComponent(encodeURIComponent(str));\r\n\t}\r\n};\r\n\r\nDataView.prototype.getStringUtf16 = function(length, offset, bom) {\r\n\toffset = offset || 0;\r\n\tlength = length || (this.byteLength - offset);\r\n\tvar littleEndian = false,\r\n\t\tstr = '',\r\n\t\tuseBuffer = false;\r\n\tif(typeof Buffer !== 'undefined') {\r\n\t\tstr = [];\r\n\t\tuseBuffer = true;\r\n\t}\r\n\tif(length < 0) {\r\n\t\tlength += this.byteLength;\r\n\t}\r\n\tif(bom) {\r\n\t\tvar bomInt = this.getUint16(offset);\r\n\t\tif(bomInt === 0xFFFE) {\r\n\t\t\tlittleEndian = true;\r\n\t\t}\r\n\t\toffset += 2;\r\n\t\tlength -= 2;\r\n\t}\r\n\tfor(var i = offset; i < (offset + length); i += 2) {\r\n\t\tvar ch = this.getUint16(i, littleEndian);\r\n\t\tif((ch >= 0 && ch <= 0xD7FF) || (ch >= 0xE000 && ch <= 0xFFFF)) {\r\n\t\t\tif(useBuffer) {\r\n\t\t\t\tstr.push(ch);\r\n\t\t\t} else {\r\n\t\t\t\tstr += String.fromCharCode(ch);\r\n\t\t\t}\r\n\t\t} else if(ch >= 0x10000 && ch <= 0x10FFFF) {\r\n\t\t\tch -= 0x10000;\r\n\t\t\tif(useBuffer) {\r\n\t\t\t\tstr.push(((0xFFC00 & ch) >> 10) + 0xD800);\r\n\t\t\t\tstr.push((0x3FF & ch) + 0xDC00);\r\n\t\t\t} else {\r\n\t\t\t\tstr += String.fromCharCode(((0xFFC00 & ch) >> 10) + 0xD800) + String.fromCharCode((0x3FF & ch) + 0xDC00);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(useBuffer) {\r\n\t\treturn str.toString();\r\n\t} else {\r\n\t\treturn decodeURIComponent(encodeURIComponent(str));\r\n\t}\r\n};\r\n\r\nDataView.prototype.getSynch = function(num) {\r\n\tvar out = 0,\r\n\t\tmask = 0x7f000000;\r\n\twhile(mask) {\r\n\t\tout >>= 1;\r\n\t\tout |= num & mask;\r\n\t\tmask >>= 8;\r\n\t}\r\n\treturn out;\r\n};\r\n\r\nDataView.prototype.getUint8Synch = function(offset) {\r\n\treturn this.getSynch(this.getUint8(offset));\r\n};\r\n\r\nDataView.prototype.getUint32Synch = function(offset) {\r\n\treturn this.getSynch(this.getUint32(offset));\r\n};\r\n\r\n/*\r\n * Not really an int as such, but named for consistency\r\n */\r\nDataView.prototype.getUint24 = function(offset, littleEndian) {\r\n\tif(littleEndian) {\r\n\t\treturn this.getUint8(offset) + (this.getUint8(offset + 1) << 8) + (this.getUint8(offset + 2) << 16);\r\n\t}\r\n\treturn this.getUint8(offset + 2) + (this.getUint8(offset + 1) << 8) + (this.getUint8(offset) << 16);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/lib/genres.js":"var Genres = [\r\n\t'Blues',\r\n\t'Classic Rock',\r\n\t'Country',\r\n\t'Dance',\r\n\t'Disco',\r\n\t'Funk',\r\n\t'Grunge',\r\n\t'Hip-Hop',\r\n\t'Jazz',\r\n\t'Metal',\r\n\t'New Age',\r\n\t'Oldies',\r\n\t'Other',\r\n\t'Pop',\r\n\t'R&B',\r\n\t'Rap',\r\n\t'Reggae',\r\n\t'Rock',\r\n\t'Techno',\r\n\t'Industrial',\r\n\t'Alternative',\r\n\t'Ska',\r\n\t'Death Metal',\r\n\t'Pranks',\r\n\t'Soundtrack',\r\n\t'Euro-Techno',\r\n\t'Ambient',\r\n\t'Trip-Hop',\r\n\t'Vocal',\r\n\t'Jazz+Funk',\r\n\t'Fusion',\r\n\t'Trance',\r\n\t'Classical',\r\n\t'Instrumental',\r\n\t'Acid',\r\n\t'House',\r\n\t'Game',\r\n\t'Sound Clip',\r\n\t'Gospel',\r\n\t'Noise',\r\n\t'AlternRock',\r\n\t'Bass',\r\n\t'Soul',\r\n\t'Punk',\r\n\t'Space',\r\n\t'Meditative',\r\n\t'Instrumental Pop',\r\n\t'Instrumental Rock',\r\n\t'Ethnic',\r\n\t'Gothic',\r\n\t'Darkwave',\r\n\t'Techno-Industrial',\r\n\t'Electronic',\r\n\t'Pop-Folk',\r\n\t'Eurodance',\r\n\t'Dream',\r\n\t'Southern Rock',\r\n\t'Comedy',\r\n\t'Cult',\r\n\t'Gangsta Rap',\r\n\t'Top 40',\r\n\t'Christian Rap',\r\n\t'Pop / Funk',\r\n\t'Jungle',\r\n\t'Native American',\r\n\t'Cabaret',\r\n\t'New Wave',\r\n\t'Psychedelic',\r\n\t'Rave',\r\n\t'Showtunes',\r\n\t'Trailer',\r\n\t'Lo-Fi',\r\n\t'Tribal',\r\n\t'Acid Punk',\r\n\t'Acid Jazz',\r\n\t'Polka',\r\n\t'Retro',\r\n\t'Musical',\r\n\t'Rock & Roll',\r\n\t'Hard Rock',\r\n\t'Folk',\r\n\t'Folk-Rock',\r\n\t'National Folk',\r\n\t'Swing',\r\n\t'Fast  Fusion',\r\n\t'Bebob',\r\n\t'Latin',\r\n\t'Revival',\r\n\t'Celtic',\r\n\t'Bluegrass',\r\n\t'Avantgarde',\r\n\t'Gothic Rock',\r\n\t'Progressive Rock',\r\n\t'Psychedelic Rock',\r\n\t'Symphonic Rock',\r\n\t'Slow Rock',\r\n\t'Big Band',\r\n\t'Chorus',\r\n\t'Easy Listening',\r\n\t'Acoustic',\r\n\t'Humour',\r\n\t'Speech',\r\n\t'Chanson',\r\n\t'Opera',\r\n\t'Chamber Music',\r\n\t'Sonata',\r\n\t'Symphony',\r\n\t'Booty Bass',\r\n\t'Primus',\r\n\t'Porn Groove',\r\n\t'Satire',\r\n\t'Slow Jam',\r\n\t'Club',\r\n\t'Tango',\r\n\t'Samba',\r\n\t'Folklore',\r\n\t'Ballad',\r\n\t'Power Ballad',\r\n\t'Rhythmic Soul',\r\n\t'Freestyle',\r\n\t'Duet',\r\n\t'Punk Rock',\r\n\t'Drum Solo',\r\n\t'A Cappella',\r\n\t'Euro-House',\r\n\t'Dance Hall',\r\n\t'Goa',\r\n\t'Drum & Bass',\r\n\t'Club-House',\r\n\t'Hardcore',\r\n\t'Terror',\r\n\t'Indie',\r\n\t'BritPop',\r\n\t'Negerpunk',\r\n\t'Polsk Punk',\r\n\t'Beat',\r\n\t'Christian Gangsta Rap',\r\n\t'Heavy Metal',\r\n\t'Black Metal',\r\n\t'Crossover',\r\n\t'Contemporary Christian',\r\n\t'Christian Rock',\r\n\t'Merengue',\r\n\t'Salsa',\r\n\t'Thrash Metal',\r\n\t'Anime',\r\n\t'JPop',\r\n\t'Synthpop',\r\n\t'Rock/Pop'\r\n];\r\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/lib/id3frame.js":"var ID3Frame = {};\r\n\r\n/*\r\n * ID3v2.3 and later frame types\r\n */\r\nID3Frame.types = {\r\n\t/*\r\n\t * Textual frames\r\n\t */\r\n\t'TALB': 'album',\r\n\t'TBPM': 'bpm',\r\n\t'TCOM': 'composer',\r\n\t'TCON': 'genre',\r\n\t'TCOP': 'copyright',\r\n\t'TDEN': 'encoding-time',\r\n\t'TDLY': 'playlist-delay',\r\n\t'TDOR': 'original-release-time',\r\n\t'TDRC': 'recording-time',\r\n\t'TDRL': 'release-time',\r\n\t'TDTG': 'tagging-time',\r\n\t'TENC': 'encoder',\r\n\t'TEXT': 'writer',\r\n\t'TFLT': 'file-type',\r\n\t'TIPL': 'involved-people',\r\n\t'TIT1': 'content-group',\r\n\t'TIT2': 'title',\r\n\t'TIT3': 'subtitle',\r\n\t'TKEY': 'initial-key',\r\n\t'TLAN': 'language',\r\n\t'TLEN': 'length',\r\n\t'TMCL': 'credits',\r\n\t'TMED': 'media-type',\r\n\t'TMOO': 'mood',\r\n\t'TOAL': 'original-album',\r\n\t'TOFN': 'original-filename',\r\n\t'TOLY': 'original-writer',\r\n\t'TOPE': 'original-artist',\r\n\t'TOWN': 'owner',\r\n\t'TPE1': 'artist',\r\n\t'TPE2': 'band',\r\n\t'TPE3': 'conductor',\r\n\t'TPE4': 'remixer',\r\n\t'TPOS': 'set-part',\r\n\t'TPRO': 'produced-notice',\r\n\t'TPUB': 'publisher',\r\n\t'TRCK': 'track',\r\n\t'TRSN': 'radio-name',\r\n\t'TRSO': 'radio-owner',\r\n\t'TSOA': 'album-sort',\r\n\t'TSOP': 'performer-sort',\r\n\t'TSOT': 'title-sort',\r\n\t'TSRC': 'isrc',\r\n\t'TSSE': 'encoder-settings',\r\n\t'TSST': 'set-subtitle',\r\n\t/*\r\n\t * Textual frames (<=2.2)\r\n\t */\r\n\t'TAL': 'album',\r\n\t'TBP': 'bpm',\r\n\t'TCM': 'composer',\r\n\t'TCO': 'genre',\r\n\t'TCR': 'copyright',\r\n\t'TDY': 'playlist-delay',\r\n\t'TEN': 'encoder',\r\n\t'TFT': 'file-type',\r\n\t'TKE': 'initial-key',\r\n\t'TLA': 'language',\r\n\t'TLE': 'length',\r\n\t'TMT': 'media-type',\r\n\t'TOA': 'original-artist',\r\n\t'TOF': 'original-filename',\r\n\t'TOL': 'original-writer',\r\n\t'TOT': 'original-album',\r\n\t'TP1': 'artist',\r\n\t'TP2': 'band',\r\n\t'TP3': 'conductor',\r\n\t'TP4': 'remixer',\r\n\t'TPA': 'set-part',\r\n\t'TPB': 'publisher',\r\n\t'TRC': 'isrc',\r\n\t'TRK': 'track',\r\n\t'TSS': 'encoder-settings',\r\n\t'TT1': 'content-group',\r\n\t'TT2': 'title',\r\n\t'TT3': 'subtitle',\r\n\t'TXT': 'writer',\r\n\t/*\r\n\t * URL frames\r\n\t */\r\n\t'WCOM': 'url-commercial',\r\n\t'WCOP': 'url-legal',\r\n\t'WOAF': 'url-file',\r\n\t'WOAR': 'url-artist',\r\n\t'WOAS': 'url-source',\r\n\t'WORS': 'url-radio',\r\n\t'WPAY': 'url-payment',\r\n\t'WPUB': 'url-publisher',\r\n\t/*\r\n\t * URL frames (<=2.2)\r\n\t */\r\n\t'WAF': 'url-file',\r\n\t'WAR': 'url-artist',\r\n\t'WAS': 'url-source',\r\n\t'WCM': 'url-commercial',\r\n\t'WCP': 'url-copyright',\r\n\t'WPB': 'url-publisher',\r\n\t/*\r\n\t * Comment frame\r\n\t */\r\n\t'COMM': 'comments',\r\n\t/*\r\n\t * Image frame\r\n\t */\r\n\t'APIC': 'image',\r\n\t'PIC': 'image'\r\n};\r\n\r\n/*\r\n * ID3 image types\r\n */\r\nID3Frame.imageTypes = [\r\n\t'other',\r\n\t'file-icon',\r\n\t'icon',\r\n\t'cover-front',\r\n\t'cover-back',\r\n\t'leaflet',\r\n\t'media',\r\n\t'artist-lead',\r\n\t'artist',\r\n\t'conductor',\r\n\t'band',\r\n\t'composer',\r\n\t'writer',\r\n\t'location',\r\n\t'during-recording',\r\n\t'during-performance',\r\n\t'screen',\r\n\t'fish',\r\n\t'illustration',\r\n\t'logo-band',\r\n\t'logo-publisher'\r\n];\r\n\r\n/*\r\n * ID3v2.3 and later\r\n */\r\nID3Frame.parse = function(buffer, major, minor) {\r\n\tminor = minor || 0;\r\n\tmajor = major || 4;\r\n\tvar result = {tag: null, value: null},\r\n\t\tdv = new DataView(buffer);\r\n\tif(major < 3) {\r\n\t\treturn ID3Frame.parseLegacy(buffer);\r\n\t}\r\n\tvar header = {\r\n\t\tid: dv.getString(4),\r\n\t\ttype: dv.getString(1),\r\n\t\tsize: dv.getUint32Synch(4),\r\n\t\tflags: [\r\n\t\t\tdv.getUint8(8),\r\n\t\t\tdv.getUint8(9)\r\n\t\t]\r\n\t};\r\n\t/*\r\n\t * No support for compressed, unsychronised, etc frames\r\n\t */\r\n\tif(header.flags[1] !== 0) {\r\n\t\treturn false;\r\n\t}\r\n\tif(!header.id in ID3Frame.types) {\r\n\t\treturn false;\r\n\t}\r\n\tresult.tag = ID3Frame.types[header.id];\r\n\tif(header.type === 'T') {\r\n\t\tvar encoding = dv.getUint8(10);\r\n\t\t/*\r\n\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t */\r\n\t\tif(encoding === 0 || encoding === 3) {\r\n\t\t\tresult.value = dv.getString(-11, 11);\r\n\t\t} else if(encoding === 1) {\r\n\t\t\tresult.value = dv.getStringUtf16(-11, 11, true);\r\n\t\t} else if(encoding === 2) {\r\n\t\t\tresult.value = dv.getStringUtf16(-11, 11);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(header.id === 'TCON' && !!parseInt(result.value)) {\r\n\t\t\tresult.value = Genres[parseInt(result.value)];\r\n\t\t}\r\n\t} else if(header.type === 'W') {\r\n\t\tresult.value = dv.getString(-10, 10);\r\n\t} else if(header.id === 'COMM') {\r\n\t\t/*\r\n\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t */\r\n\t\tvar encoding = dv.getUint8(10),\r\n\t\t\tvariableStart = 14, variableLength = 0;\r\n\t\t/*\r\n\t\t * Skip the comment description and retrieve only the comment its self\r\n\t\t */\r\n\t\tfor(var i = variableStart;; i++) {\r\n\t\t\tif(encoding === 1 || encoding === 2) {\r\n\t\t\t\tif(dv.getUint16(i) === 0x0000) {\r\n\t\t\t\t\tvariableStart = i + 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t} else {\r\n\t\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\t\tvariableStart = i + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(encoding === 0 || encoding === 3) {\r\n\t\t\tresult.value = dv.getString(-1 * variableStart, variableStart);\r\n\t\t} else if(encoding === 1) {\r\n\t\t\tresult.value = dv.getStringUtf16(-1 * variableStart, variableStart, true);\r\n\t\t} else if(encoding === 2) {\r\n\t\t\tresult.value = dv.getStringUtf16(-1 * variableStart, variableStart);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} else if(header.id === 'APIC') {\r\n\t\tvar encoding = dv.getUint8(10),\r\n\t\t\timage = {\r\n\t\t\t\ttype: null,\r\n\t\t\t\tmime: null,\r\n\t\t\t\tdescription: null,\r\n\t\t\t\tdata: null\r\n\t\t\t};\r\n\t\tvar variableStart = 11, variableLength = 0;\r\n\t\tfor(var i = variableStart;;i++) {\r\n\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\timage.mime = dv.getString(variableLength, variableStart);\r\n\t\timage.type = ID3Frame.imageTypes[dv.getUint8(variableStart + variableLength + 1)] || 'other';\r\n\t\tvariableStart += variableLength + 2;\r\n\t\tvariableLength = 0;\r\n\t\tfor(var i = variableStart;; i++) {\r\n\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\timage.description = (variableLength === 0 ? null : dv.getString(variableLength, variableStart));\r\n\t\timage.data = buffer.slice(variableStart + 1);\r\n\t\tresult.value = image;\r\n\t}\r\n\treturn (result.tag ? result : false);\r\n};\r\n\r\n/*\r\n * ID3v2.2 and earlier\r\n */\r\nID3Frame.parseLegacy = function(buffer) {\r\n\tvar result = {tag: null, value: null},\r\n\t\tdv = new DataView(buffer),\r\n\t\theader = {\r\n\t\t\tid: dv.getString(3),\r\n\t\t\ttype: dv.getString(1),\r\n\t\t\tsize: dv.getUint24(3)\r\n\t\t};\r\n\tif(!header.id in ID3Frame.types) {\r\n\t\treturn false;\r\n\t}\r\n\tresult.tag = ID3Frame.types[header.id];\r\n\tif(header.type === 'T') {\r\n\t\tvar encoding = dv.getUint8(7);\r\n\t\t/*\r\n\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t */\r\n\t\tresult.value = dv.getString(-7, 7);\r\n\t\tif(header.id === 'TCO' && !!parseInt(result.value)) {\r\n\t\t\tresult.value = Genres[parseInt(result.value)];\r\n\t\t}\r\n\t} else if(header.type === 'W') {\r\n\t\tresult.value = dv.getString(-7, 7);\r\n\t} else if(header.id === 'COM') {\r\n\t\t/*\r\n\t\t * TODO: Implement UTF-8, UTF-16 and UTF-16 with BOM properly?\r\n\t\t */\r\n\t\tvar encoding = dv.getUint8(6);\r\n\t\tresult.value = dv.getString(-10, 10);\r\n\t\tif(result.value.indexOf('\\x00') !== -1) {\r\n\t\t\tresult.value = result.value.substr(result.value.indexOf('\\x00') + 1);\r\n\t\t}\r\n\t} else if(header.id === 'PIC') {\r\n\t\tvar encoding = dv.getUint8(6),\r\n\t\t\timage = {\r\n\t\t\t\ttype: null,\r\n\t\t\t\tmime: 'image/' + dv.getString(3, 7).toLowerCase(),\r\n\t\t\t\tdescription: null,\r\n\t\t\t\tdata: null\r\n\t\t\t};\r\n\t\timage.type = ID3Frame.imageTypes[dv.getUint8(11)] || 'other';\r\n\t\tvar variableStart = 11, variableLength = 0;\r\n\t\tfor(var i = variableStart;; i++) {\r\n\t\t\tif(dv.getUint8(i) === 0x00) {\r\n\t\t\t\tvariableLength = i - variableStart;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\timage.description = (variableLength === 0 ? null : dv.getString(variableLength, variableStart));\r\n\t\timage.data = buffer.slice(variableStart + 1);\r\n\t\tresult.value = image;\r\n\t}\r\n\treturn (result.tag ? result : false);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/lib/id3tag.js":"var ID3Tag = {};\r\n\r\nID3Tag.parse = function(handle, callback) {\r\n\tvar tags = {\r\n\t\t\ttitle: null,\r\n\t\t\talbum: null,\r\n\t\t\tartist: null,\r\n\t\t\tyear: null,\r\n\t\t\tv1: {\r\n\t\t\t\t\ttitle: null,\r\n\t\t\t\t\tartist: null,\r\n\t\t\t\t\talbum: null,\r\n\t\t\t\t\tyear: null,\r\n\t\t\t\t\tcomment: null,\r\n\t\t\t\t\ttrack: null,\r\n\t\t\t\t\tversion: 1.0\r\n\t\t\t\t},\r\n\t\t\tv2: {\r\n\t\t\t\t\tversion: [null, null]\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tprocessed = {\r\n\t\t\tv1: false,\r\n\t\t\tv2: false\r\n\t\t},\r\n\t\tprocess = function() {\r\n\t\t\tif(processed.v1 && processed.v2) {\r\n\t\t\t\ttags.title = tags.v2.title || tags.v1.title;\r\n\t\t\t\ttags.album = tags.v2.album || tags.v1.album;\r\n\t\t\t\ttags.artist = tags.v2.artist || tags.v1.artist;\r\n\t\t\t\ttags.year = tags.v1.year;\r\n\t\t\t\tcallback(null, tags);\r\n\t\t\t}\r\n\t\t};\r\n\t/*\r\n\t * Read the last 128 bytes (ID3v1)\r\n\t */\r\n\thandle.read(128, handle.size - 128, function(err, buffer) {\r\n\t\tif(err) {\r\n\t\t\treturn callback('Could not read file');\r\n\t\t}\r\n\t\tvar dv = new DataView(buffer);\r\n\t\tif(buffer.byteLength !== 128 || dv.getString(3, null, true) !== 'TAG') {\r\n\t\t\tprocessed.v1 = true;\r\n\t\t\treturn process();\r\n\t\t}\r\n\t\ttags.v1.title = dv.getString(30, 3).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\ttags.v1.artist = dv.getString(30, 33).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\ttags.v1.album = dv.getString(30, 63).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\ttags.v1.year = dv.getString(4, 93).replace(/(^\\s+|\\s+$)/, '') || null;\r\n\t\t/*\r\n\t\t * If there is a zero byte at [125], the comment is 28 bytes and the remaining 2 are [0, trackno]\r\n\t\t */\r\n\t\tif(dv.getUint8(125) === 0) {\r\n\t\t\ttags.v1.comment = dv.getString(28, 97).replace(/(^\\s+|\\s+$)/, '');\r\n\t\t\ttags.v1.version = 1.1;\r\n\t\t\ttags.v1.track = dv.getUint8(126);\r\n\t\t} else {\r\n\t\t\ttags.v1.comment = dv.getString(30, 97).replace(/(^\\s+|\\s+$)/, '');\r\n\t\t}\r\n\t\t/*\r\n\t\t * Lookup the genre index in the predefined genres array\r\n\t\t */\r\n\t\ttags.v1.genre = Genres[dv.getUint8(127)] || null;\r\n\t\tprocessed.v1 = true;\r\n\t\tprocess();\r\n\t});\r\n\t/*\r\n\t * Read 14 bytes (10 for ID3v2 header, 4 for possible extended header size)\r\n\t * Assuming the ID3v2 tag is prepended\r\n\t */\r\n\thandle.read(14, 0, function(err, buffer) {\r\n\t\tif(err) {\r\n\t\t\treturn callback('Could not read file');\r\n\t\t}\r\n\t\tvar dv = new DataView(buffer),\r\n\t\t\theaderSize = 10,\r\n\t\t\ttagSize = 0,\r\n\t\t\ttagFlags;\r\n\t\t/*\r\n\t\t * Be sure that the buffer is at least the size of an id3v2 header\r\n\t\t * Assume incompatibility if a major version of > 4 is used\r\n\t\t */\r\n\t\tif(buffer.byteLength !== 14 || dv.getString(3, null, true) !== 'ID3' || dv.getUint8(3) > 4) {\r\n\t\t\tprocessed.v2 = true;\r\n\t\t\treturn process();\r\n\t\t}\r\n\t\ttags.v2.version = [\r\n\t\t\tdv.getUint8(3),\r\n\t\t\tdv.getUint8(4)\r\n\t\t];\r\n\t\ttagFlags = dv.getUint8(5);\r\n\t\t/*\r\n\t\t * Do not support unsynchronisation\r\n\t\t */\r\n\t\tif((tagFlags & 0x80) !== 0) {\r\n\t\t\tprocessed.v2 = true;\r\n\t\t\treturn process();\r\n\t\t}\r\n\t\t/*\r\n\t\t * Increment the header size to offset by if an extended header exists\r\n\t\t */\r\n\t\tif((tagFlags & 0x40) !== 0) {\r\n\t\t\theaderSize += dv.getUint32Synch(11);\r\n\t\t}\r\n\t\t/*\r\n\t\t * Calculate the tag size to be read\r\n\t\t */\r\n\t\ttagSize += dv.getUint32Synch(6);\r\n\t\thandle.read(tagSize, headerSize, function(err, buffer) {\r\n\t\t\tif(err) {\r\n\t\t\t\tprocessed.v2 = true;\r\n\t\t\t\treturn process();\r\n\t\t\t}\r\n\t\t\tvar dv = new DataView(buffer),\r\n\t\t\t\tposition = 0;\r\n\t\t\twhile(position < buffer.byteLength) {\r\n\t\t\t\tvar frame,\r\n\t\t\t\t\tslice,\r\n\t\t\t\t\tframeBit,\r\n\t\t\t\t\tisFrame = true;\r\n\t\t\t\tfor(var i = 0; i < 3; i++) {\r\n\t\t\t\t\tframeBit = dv.getUint8(position + i);\r\n\t\t\t\t\tif((frameBit < 0x41 || frameBit > 0x5A) && (frameBit < 0x30 || frameBit > 0x39)) {\r\n\t\t\t\t\t\tisFrame = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!isFrame) break;\r\n\t\t\t\t/*\r\n\t\t\t\t * < v2.3, frame ID is 3 chars, size is 3 bytes making a total size of 6 bytes\r\n\t\t\t\t * >= v2.3, frame ID is 4 chars, size is 4 bytes, flags are 2 bytes, total 10 bytes\r\n\t\t\t\t */\r\n\t\t\t\tif(tags.v2.version[0] < 3) {\r\n\t\t\t\t\tslice = buffer.slice(position, position + 6 + dv.getUint24(position + 3));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tslice = buffer.slice(position, position + 10 + dv.getUint32Synch(position + 4));\r\n\t\t\t\t}\r\n\t\t\t\tframe = ID3Frame.parse(slice, tags.v2.version[0]);\r\n\t\t\t\tif(frame) {\r\n\t\t\t\t\ttags.v2[frame.tag] = frame.value;\r\n\t\t\t\t}\r\n\t\t\t\tposition += slice.byteLength;\r\n\t\t\t}\r\n\t\t\tprocessed.v2 = true;\r\n\t\t\tprocess();\r\n\t\t});\r\n\t});\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-id3js/node_modules/id3js/lib/reader.js":"/*\r\n * Reader.js\r\n * A unified reader interface for AJAX, local and File API access\r\n * 43081j\r\n * License: MIT, see LICENSE\r\n */\r\nvar Reader = function(type) {\r\n\tthis.type = type || Reader.OPEN_URI;\r\n\tthis.size = null;\r\n\tthis.file = null;\r\n};\r\n\r\nReader.OPEN_FILE = 1;\r\nReader.OPEN_URI = 2;\r\nReader.OPEN_LOCAL = 3;\r\n\r\nReader.prototype.open = function(file, callback) {\r\n\tthis.file = file;\r\n\tvar self = this;\r\n\tswitch(this.type) {\r\n\t\tcase Reader.OPEN_LOCAL:\r\n\t\t\tfs.stat(this.file, function(err, stat) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\tself.size = stat.size;\r\n\t\t\t\tfs.open(self.file, 'r', function(err, fd) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.fd = fd;\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\tbreak;\r\n\t\tcase Reader.OPEN_FILE:\r\n\t\t\tthis.size = this.file.size;\r\n\t\t\tcallback();\r\n\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthis.ajax(\r\n\t\t\t\t{\r\n\t\t\t\t\turi: this.file,\r\n\t\t\t\t\ttype: 'HEAD',\r\n\t\t\t\t},\r\n\t\t\t\tfunction(err, resp, xhr) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.size = parseInt(xhr.getResponseHeader('Content-Length'));\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\tbreak;\r\n\t}\r\n};\r\n\r\nReader.prototype.close = function() {\r\n\tif(this.type === Reader.OPEN_LOCAL) {\r\n\t\tfs.close(this.fd);\r\n\t}\r\n};\r\n\r\nReader.prototype.read = function(length, position, callback) {\r\n\tif(this.type === Reader.OPEN_LOCAL) {\r\n\t\tthis.readLocal(length, position, callback);\r\n\t} else if(this.type === Reader.OPEN_FILE) {\r\n\t\tthis.readFile(length, position, callback);\r\n\t} else {\r\n\t\tthis.readUri(length, position, callback);\r\n\t}\r\n};\r\n\r\n/*\r\n * Local reader\r\n */\r\nReader.prototype.readLocal = function(length, position, callback) {\r\n\tvar buffer = new Buffer(length);\r\n\tfs.read(this.fd, buffer, 0, length, position, function(err, bytesRead, buffer) {\r\n\t\tif(err) {\r\n\t\t\treturn callback(err);\r\n\t\t}\r\n\t\tvar ab = new ArrayBuffer(buffer.length),\r\n\t\t\tview = new Uint8Array(ab);\r\n\t\tfor(var i = 0; i < buffer.length; i++) {\r\n\t\t\tview[i] = buffer[i];\r\n\t\t}\r\n\t\tcallback(null, ab);\r\n\t});\r\n};\r\n\r\n/*\r\n * URL reader\r\n */\r\nReader.prototype.ajax = function(opts, callback) {\r\n\tvar options = {\r\n\t\ttype: 'GET',\r\n\t\turi: null,\r\n\t\tresponseType: 'text'\r\n\t};\r\n\tif(typeof opts === 'string') {\r\n\t\topts = {uri: opts};\r\n\t}\r\n\tfor(var k in opts) {\r\n\t\toptions[k] = opts[k];\r\n\t}\r\n\tvar xhr = new XMLHttpRequest();\r\n\txhr.onreadystatechange = function() {\r\n\t\tif(xhr.readyState !== 4) return;\r\n\t\tif(xhr.status !== 200 && xhr.status !== 206) {\r\n\t\t\treturn callback('Received non-200/206 response (' + xhr.status + ')');\r\n\t\t}\r\n\t\tcallback(null, xhr.response, xhr);\r\n\t};\r\n\txhr.responseType = options.responseType;\r\n\txhr.open(options.type, options.uri, true);\r\n\tif(options.range) {\r\n\t\toptions.range = [].concat(options.range);\r\n\t\tif(options.range.length === 2) {\r\n\t\t\txhr.setRequestHeader('Range', 'bytes=' + options.range[0] + '-' + options.range[1]);\r\n\t\t} else {\r\n\t\t\txhr.setRequestHeader('Range', 'bytes=' + options.range[0]);\r\n\t\t}\r\n\t}\r\n\txhr.send();\r\n};\r\n\r\nReader.prototype.readUri = function(length, position, callback) {\r\n\tthis.ajax(\r\n\t\t{\r\n\t\t\turi: this.file,\r\n\t\t\ttype: 'GET',\r\n\t\t\tresponseType: 'arraybuffer',\r\n\t\t\trange: [position, position+length-1]\r\n\t\t},\r\n\t\tfunction(err, buffer) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\treturn callback(null, buffer);\r\n\t\t}\r\n\t);\r\n};\r\n\r\n/*\r\n * File API reader\r\n */\r\nReader.prototype.readFile = function(length, position, callback) {\r\n\tvar slice = this.file.slice(position, position+length),\r\n\t\tfr = new FileReader();\r\n\tfr.onload = function(e) {\r\n\t\tcallback(null, e.target.result);\r\n\t};\r\n\tfr.onerror = function(e) {\r\n\t\tcallback('File read failed');\r\n\t};\r\n\tfr.readAsArrayBuffer(slice);\r\n};\r\n"}